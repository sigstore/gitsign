name: E2E

on:
  push:
    branches: ['main']
  pull_request_target:
    branches: ['main']
  workflow_dispatch:

jobs:
  e2e:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Enable OIDC

      # The rest of these are sanity-check settings, since I'm not sure if the
      # org default is permissive or restricted.
      # See https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
      # for more details.
      actions: none
      checks: none
      contents: read
      deployments: none
      issues: none
      packages: none
      pages: none
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none

    env:
      # Output logs to file in case we need to inspect errors.
      GITSIGN_LOG: "/tmp/gitsign.log"

    steps:
    - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2
      with:
        # Use the merge commit if type is pull_request/pull_request_target,
        # else use the default ref.
        # By default pull_request_target will use the base branch as the
        # target since it was originally intended for trusted workloads.
        # However, we need to use this to have access to the OIDC creds
        # for the e2e tests, so insert our own logic here.
        # This is effectively a ternary of the form ${{ <condition> && <true> || <false> }}.
        # See https://docs.github.com/en/actions/learn-github-actions/expressions for more details.
        ref: ${{ startsWith(github.event_name, 'pull_request') && format('refs/pull/{0}/merge', github.event.number) || github.ref }}

    - name: Set up Go
      uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f # v3.3.0
      with:
        go-version: 1.18
        check-latest: true

    - name: Test Sign and Verify commit
      run: |
        set -e

        # Setup repo + tool
        make install-gitsign
        export PATH="$PATH:$GOPATH/bin"
        echo "PATH=${PATH}"
        whereis gitsign
        mkdir /tmp/git
        cd /tmp/git
        git init -b main .
        git config --global user.email "test@example.com"
        git config --global user.name "gitsign"
        git config --global gpg.x509.program gitsign
        git config --global gpg.format x509
        git config --global commit.gpgsign true

        # Verify tool is on our path
        gitsign -h

        # Sign commit
        git commit --allow-empty -S --message="Signed commit"

        # Verify commit
        git verify-commit HEAD

        # Extra debug info
        git cat-file commit HEAD | sed -n '/BEGIN/, /END/p' | sed 's/^ //g' | sed 's/gpgsig //g' | sed 's/SIGNED MESSAGE/PKCS7/g' | openssl pkcs7 -print -print_certs -text
    - name: Debug log
      if: failure()
      run: cat ${GITSIGN_LOG}
