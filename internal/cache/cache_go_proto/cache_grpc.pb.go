// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: cache.proto

package cache_go_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CredentialStoreClient is the client API for CredentialStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredentialStoreClient interface {
	StoreCredential(ctx context.Context, in *StoreCredentialRequest, opts ...grpc.CallOption) (*StoreCredentialResponse, error)
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*Credential, error)
}

type credentialStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialStoreClient(cc grpc.ClientConnInterface) CredentialStoreClient {
	return &credentialStoreClient{cc}
}

func (c *credentialStoreClient) StoreCredential(ctx context.Context, in *StoreCredentialRequest, opts ...grpc.CallOption) (*StoreCredentialResponse, error) {
	out := new(StoreCredentialResponse)
	err := c.cc.Invoke(ctx, "/sigtore.gitsign.cache.CredentialStore/StoreCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialStoreClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*Credential, error) {
	out := new(Credential)
	err := c.cc.Invoke(ctx, "/sigtore.gitsign.cache.CredentialStore/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredentialStoreServer is the server API for CredentialStore service.
// All implementations must embed UnimplementedCredentialStoreServer
// for forward compatibility
type CredentialStoreServer interface {
	StoreCredential(context.Context, *StoreCredentialRequest) (*StoreCredentialResponse, error)
	GetCredential(context.Context, *GetCredentialRequest) (*Credential, error)
	mustEmbedUnimplementedCredentialStoreServer()
}

// UnimplementedCredentialStoreServer must be embedded to have forward compatible implementations.
type UnimplementedCredentialStoreServer struct {
}

func (UnimplementedCredentialStoreServer) StoreCredential(context.Context, *StoreCredentialRequest) (*StoreCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreCredential not implemented")
}
func (UnimplementedCredentialStoreServer) GetCredential(context.Context, *GetCredentialRequest) (*Credential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedCredentialStoreServer) mustEmbedUnimplementedCredentialStoreServer() {}

// UnsafeCredentialStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialStoreServer will
// result in compilation errors.
type UnsafeCredentialStoreServer interface {
	mustEmbedUnimplementedCredentialStoreServer()
}

func RegisterCredentialStoreServer(s grpc.ServiceRegistrar, srv CredentialStoreServer) {
	s.RegisterService(&CredentialStore_ServiceDesc, srv)
}

func _CredentialStore_StoreCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialStoreServer).StoreCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigtore.gitsign.cache.CredentialStore/StoreCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialStoreServer).StoreCredential(ctx, req.(*StoreCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialStore_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialStoreServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigtore.gitsign.cache.CredentialStore/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialStoreServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CredentialStore_ServiceDesc is the grpc.ServiceDesc for CredentialStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CredentialStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sigtore.gitsign.cache.CredentialStore",
	HandlerType: (*CredentialStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreCredential",
			Handler:    _CredentialStore_StoreCredential_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _CredentialStore_GetCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache.proto",
}
